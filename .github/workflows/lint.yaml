name: Lint and Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: pre-commit-

      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  formatting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort ruff

      - name: Check code formatting with Black
        run: |
          echo "🎨 Checking code formatting..."
          black --check --verbose --diff .

      - name: Check import sorting with isort
        run: |
          echo "📦 Checking import sorting..."
          isort --check-only --verbose --diff .

      - name: Run Ruff linter
        run: |
          echo "⚡ Running Ruff linter..."
          ruff check . --output-format=github

  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install linting tools
        run: |
          pip install flake8 flake8-bugbear flake8-simplify
          pip install pylint pylint-django

      - name: Create flake8 config
        run: |
          cat > .flake8 << EOF
          [flake8]
          max-line-length = 88
          extend-ignore = E203, E266, E501, W503
          max-complexity = 18
          select = B,C,E,F,W,T4,B9
          exclude = 
              .git,
              __pycache__,
              .venv,
              migrations,
              build,
              dist
          per-file-ignores =
              __init__.py:F401
              settings/*.py:F405,F403
              */migrations/*.py:E501
          EOF

      - name: Run flake8
        run: |
          echo "🔍 Running flake8 linting..."
          flake8 . --statistics

      - name: Run pylint
        run: |
          echo "🔍 Running pylint..."
          pylint --load-plugins=pylint_django --django-settings-module=credit_system.settings.local $(find . -name "*.py" -not -path "./migrations/*" -not -path "./.venv/*") || true

  type-checking:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install type checking tools
        run: |
          pip install mypy django-stubs djangorestframework-stubs
          pip install types-requests types-redis types-PyYAML

      - name: Create mypy config
        run: |
          cat > pyproject.toml << EOF
          [tool.mypy]
          python_version = "3.12"
          check_untyped_defs = true
          ignore_missing_imports = true
          warn_unused_ignores = true
          warn_redundant_casts = true
          strict_optional = true
          
          [[tool.mypy.overrides]]
          module = ["*.migrations.*", "manage", "*.settings.*"]
          ignore_errors = true
          EOF

      - name: Run mypy type checking
        run: |
          echo "🔍 Running mypy type checking..."
          mypy . || true

  security-linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install security tools
        run: pip install bandit[toml] safety

      - name: Create bandit config
        run: |
          cat > pyproject.toml << EOF
          [tool.bandit]
          exclude_dirs = ["migrations", "venv", ".venv", "tests"]
          skips = ["B101", "B601"]
          EOF

      - name: Run bandit security linting
        run: |
          echo "🔒 Running bandit security scan..."
          bandit -r . || true

      - name: Run safety check
        run: |
          echo "🔒 Running safety vulnerability check..."
          safety check || true

  complexity-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install radon xenon

      - name: Run complexity analysis
        run: |
          echo "📊 Running complexity analysis..."
          radon cc . --average --show-complexity
          radon mi .

      - name: Check complexity thresholds
        run: |
          echo "🎯 Checking complexity thresholds..."
          xenon --max-absolute B --max-modules A --max-average A . || true

  documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install documentation tools
        run: |
          python -m pip install --upgrade pip
          pip install interrogate

      - name: Check documentation coverage
        run: |
          echo "📚 Checking documentation coverage..."
          interrogate -v --ignore-init-method --ignore-magic --ignore-module --ignore-nested-functions --fail-under 70 . || true