name: Lint and Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit hooks
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-

      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  formatting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort autoflake

      - name: Check code formatting with Black
        run: |
          echo "🎨 Checking code formatting..."
          black --check --verbose --diff .

      - name: Check import sorting with isort
        run: |
          echo "📦 Checking import sorting..."
          isort --check-only --verbose --diff .

      - name: Check for unused imports with autoflake
        run: |
          echo "🧹 Checking for unused imports..."
          autoflake --check --recursive --remove-all-unused-imports --remove-unused-variables .

  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install linting tools
        run: |
          pip install flake8 flake8-docstrings flake8-import-order flake8-bugbear
          pip install pylint pylint-django
          pip install pydocstyle
          pip install pycodestyle
          pip install mccabe

      - name: Create flake8 config
        run: |
          cat > .flake8 << EOF
          [flake8]
          max-line-length = 88
          extend-ignore = E203, E266, E501, W503, F403, F401
          max-complexity = 18
          select = B,C,E,F,W,T4,B9
          exclude = 
              .git,
              __pycache__,
              .venv,
              venv,
              migrations,
              build,
              dist,
              .tox,
              .eggs,
              *.egg
          per-file-ignores =
              __init__.py:F401
              settings/*.py:F405,F403
              */migrations/*.py:E501
          EOF

      - name: Run flake8
        run: |
          echo "🔍 Running flake8 linting..."
          flake8 . --statistics --tee --output-file=flake8_report.txt

      - name: Run pylint
        run: |
          echo "🔍 Running pylint..."
          pylint --load-plugins=pylint_django --django-settings-module=credit_system.settings.local --output-format=text --reports=yes --msg-template='{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}' $(find . -name "*.py" -not -path "./migrations/*" -not -path "./.venv/*" -not -path "./venv/*") > pylint_report.txt || true

      - name: Run pydocstyle
        run: |
          echo "📚 Checking docstring style..."
          pydocstyle --count --explain --source . || true

      - name: Upload lint reports as artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lint-reports
          path: |
            flake8_report.txt
            pylint_report.txt

  type-checking:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install type checking tools
        run: |
          pip install mypy django-stubs djangorestframework-stubs
          pip install types-requests types-redis types-PyYAML

      - name: Create mypy config
        run: |
          cat > mypy.ini << EOF
          [mypy]
          python_version = 3.11
          check_untyped_defs = true
          ignore_missing_imports = true
          warn_unused_ignores = true
          warn_redundant_casts = true
          warn_unused_configs = true
          disallow_subclassing_any = true
          disallow_untyped_decorators = true
          disallow_any_generics = true
          strict_optional = true
          warn_return_any = true
          
          [mypy-*.migrations.*]
          ignore_errors = true
          
          [mypy-manage]
          ignore_errors = true
          
          [mypy-*.settings.*]
          ignore_errors = true
          EOF

      - name: Run mypy type checking
        run: |
          echo "🔍 Running mypy type checking..."
          mypy . --config-file=mypy.ini --txt-report=mypy_report || true

      - name: Upload mypy report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: mypy-report
          path: mypy_report/

  security-linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install security tools
        run: |
          pip install bandit[toml] safety semgrep

      - name: Create bandit config
        run: |
          cat > .bandit << EOF
          [bandit]
          exclude_dirs = ["*/migrations/*", "*/venv/*", "*/.venv/*", "*/tests/*"]
          skips = ["B101", "B601"]
          EOF

      - name: Run bandit security linting
        run: |
          echo "🔒 Running bandit security scan..."
          bandit -r . -f json -o bandit_report.json || true
          bandit -r . || true

      - name: Run safety check
        run: |
          echo "🔒 Running safety vulnerability check..."
          safety check --json --output safety_report.json || true
          safety check || true

      - name: Run semgrep security analysis
        run: |
          echo "🔒 Running semgrep security analysis..."
          semgrep --config=auto --json --output=semgrep_report.json . || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit_report.json
            safety_report.json
            semgrep_report.json

  complexity-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install radon xenon mccabe

      - name: Run complexity analysis with radon
        run: |
          echo "📊 Running complexity analysis..."
          echo "=== Cyclomatic Complexity ===" > complexity_report.txt
          radon cc . --average --show-complexity >> complexity_report.txt
          echo "" >> complexity_report.txt
          
          echo "=== Maintainability Index ===" >> complexity_report.txt
          radon mi . >> complexity_report.txt
          echo "" >> complexity_report.txt
          
          echo "=== Raw Metrics ===" >> complexity_report.txt
          radon raw . >> complexity_report.txt

      - name: Check complexity thresholds with xenon
        run: |
          echo "🎯 Checking complexity thresholds..."
          xenon --max-absolute B --max-modules A --max-average A . || true

      - name: Upload complexity report
        uses: actions/upload-artifact@v3
        with:
          name: complexity-report
          path: complexity_report.txt

  documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install documentation tools
        run: |
          python -m pip install --upgrade pip
          pip install pydoc-markdown interrogate

      - name: Check documentation coverage
        run: |
          echo "📚 Checking documentation coverage..."
          interrogate -v --ignore-init-method --ignore-magic --ignore-module --ignore-nested-functions --fail-under 80 .

  report-summary:
    runs-on: ubuntu-latest
    needs: [pre-commit, formatting, linting, type-checking, security-linting, complexity-analysis, documentation]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate summary report
        run: |
          echo "# Code Quality Report" > quality_report.md
          echo "" >> quality_report.md
          echo "## Summary" >> quality_report.md
          echo "- ✅ Pre-commit hooks: ${{ needs.pre-commit.result }}" >> quality_report.md
          echo "- ✅ Code formatting: ${{ needs.formatting.result }}" >> quality_report.md
          echo "- ✅ Linting: ${{ needs.linting.result }}" >> quality_report.md
          echo "- ✅ Type checking: ${{ needs.type-checking.result }}" >> quality_report.md
          echo "- ✅ Security scanning: ${{ needs.security-linting.result }}" >> quality_report.md
          echo "- ✅ Complexity analysis: ${{ needs.complexity-analysis.result }}" >> quality_report.md
          echo "- ✅ Documentation: ${{ needs.documentation.result }}" >> quality_report.md
          echo "" >> quality_report.md
          echo "Generated on: $(date)" >> quality_report.md

      - name: Upload summary report
        uses: actions/upload-artifact@v3
        with:
          name: quality-summary
          path: quality_report.md